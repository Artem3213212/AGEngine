{*********************************}
{ Generated by c2pas32  v0.9b     }
{ (c) 2001 Oleg Bulychov          }
{ Gladiators Software             }
{ http://www.astonshell.com/      }
{*********************************}

unit CL21Types;

interface

uses
  System.SysUtils;

(**********************************************************************************
 * Copyright (c) 2008-2015 The Khronos Group Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and/or associated documentation files (the
 * "Materials"), to deal in the Materials without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Materials, and to
 * permit persons to whom the Materials are furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Materials.
 *
 * MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
 * KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS
 * SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT
 *    https://www.khronos.org/registry/
 *
 * THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 **********************************************************************************)

(* $Revision: 11803 $ on $Date: 2010-06-25 10:02:12 -0700 (Fri, 25 Jun 2010) $ *)

{$ifndef __CL_PLATFORM_H}
{$define __CL_PLATFORM_H}

{$ifdef __APPLE__}
(* Contains #defines for AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER below *)
{$include <AvailabilityMacros.h>}
{$endif}

{$ifdef __cplusplus}
extern{!!!e unknown token}
{$endif}

{$if defined(_WIN32)}
{$define CL_API_ENTRY}
const
CL_API_CALL = __stdcall; 
CL_CALLBACK = __stdcall; 
{$else}
{$define CL_API_ENTRY}
{$define CL_API_CALL}
{$define CL_CALLBACK}
{$endif}

(*
 * Deprecation flags refer to the last version of the header in which the
 * feature was not deprecated.
 *
 * E.g. VERSION_1_1_DEPRECATED means the feature is present in 1.1 without
 * deprecation but is deprecated in versions later than 1.1.
 *)

{$ifdef __APPLE__}
CL_EXTENSION_WEAK_LINK = __attribute__((weak_import)); 
CL_API_SUFFIX__VERSION_1_0 = AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER; 
CL_EXT_SUFFIX__VERSION_1_0 = CL_EXTENSION_WEAK_LINKAVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER; 
CL_API_SUFFIX__VERSION_1_1 = AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER; 
GCL_API_SUFFIX__VERSION_1_1 = AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER; 
CL_EXT_SUFFIX__VERSION_1_1 = CL_EXTENSION_WEAK_LINKAVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER; 
CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED = CL_EXTENSION_WEAK_LINKAVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7; 
{$ifdef AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER}
CL_API_SUFFIX__VERSION_1_2 = AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER; 
GCL_API_SUFFIX__VERSION_1_2 = AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER; 
CL_EXT_SUFFIX__VERSION_1_2 = CL_EXTENSION_WEAK_LINKAVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER; 
{$define CL_EXT_PREFIX__VERSION_1_1_DEPRECATED}
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED = CL_EXTENSION_WEAK_LINKAVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8; 
{$else}
{$warning  This path should never happen outside of internal operating system development.  AvailabilityMacros do not function correctly here!}
CL_API_SUFFIX__VERSION_1_2 = AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER; 
GCL_API_SUFFIX__VERSION_1_2 = AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER; 
CL_EXT_SUFFIX__VERSION_1_2 = CL_EXTENSION_WEAK_LINKAVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER; 
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED = CL_EXTENSION_WEAK_LINKAVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER; 
{$endif}
{$else}
{$define CL_EXTENSION_WEAK_LINK}
{$define CL_API_SUFFIX__VERSION_1_0}
{$define CL_EXT_SUFFIX__VERSION_1_0}
{$define CL_API_SUFFIX__VERSION_1_1}
{$define CL_EXT_SUFFIX__VERSION_1_1}
{$define CL_API_SUFFIX__VERSION_1_2}
{$define CL_EXT_SUFFIX__VERSION_1_2}
{$define CL_API_SUFFIX__VERSION_2_0}
{$define CL_EXT_SUFFIX__VERSION_2_0}
{$define CL_API_SUFFIX__VERSION_2_1}
{$define CL_EXT_SUFFIX__VERSION_2_1}
{$ifdef __GNUC__}
{$ifdef CL_USE_DEPRECATED_OPENCL_1_0_APIS}
{$define CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_0_DEPRECATED}
{$else}
CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED = __attribute__((deprecated)); 
{$define CL_EXT_PREFIX__VERSION_1_0_DEPRECATED}
{$endif}
{$ifdef CL_USE_DEPRECATED_OPENCL_1_1_APIS}
{$define CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_1_DEPRECATED}
{$else}
CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED = __attribute__((deprecated)); 
{$define CL_EXT_PREFIX__VERSION_1_1_DEPRECATED}
{$endif}

{$ifdef CL_USE_DEPRECATED_OPENCL_1_2_APIS}
{$define CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_2_DEPRECATED}
{$else}
CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED = __attribute__((deprecated)); 
{$define CL_EXT_PREFIX__VERSION_1_2_DEPRECATED}
{$endif}

{$ifdef CL_USE_DEPRECATED_OPENCL_2_0_APIS}
{$define CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_2_0_DEPRECATED}
{$else}
CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED = __attribute__((deprecated)); 
{$define CL_EXT_PREFIX__VERSION_2_0_DEPRECATED}
{$endif}
{$elif defined(_WIN32)}
{$ifdef CL_USE_DEPRECATED_OPENCL_1_0_APIS}
{$define CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_0_DEPRECATED}
{$else}
{$define CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED}
CL_EXT_PREFIX__VERSION_1_0_DEPRECATED = __declspec(deprecated); 
{$endif}
{$ifdef CL_USE_DEPRECATED_OPENCL_1_1_APIS}
{$define CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_1_DEPRECATED}
{$else}
{$define CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED}
CL_EXT_PREFIX__VERSION_1_1_DEPRECATED = __declspec(deprecated); 
{$endif}
{$ifdef CL_USE_DEPRECATED_OPENCL_1_2_APIS}
{$define CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_2_DEPRECATED}
{$else}
{$define CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED}
CL_EXT_PREFIX__VERSION_1_2_DEPRECATED = __declspec(deprecated); 
{$endif}

{$ifdef CL_USE_DEPRECATED_OPENCL_2_0_APIS}
{$define CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_2_0_DEPRECATED}
{$else}
{$define CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED}
CL_EXT_PREFIX__VERSION_2_0_DEPRECATED = __declspec(deprecated); 
{$endif}
{$else}
{$define CL_EXT_SUFFIX__VERSION_1_0_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_0_DEPRECATED}
{$define CL_EXT_SUFFIX__VERSION_1_1_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_1_DEPRECATED}
{$define CL_EXT_SUFFIX__VERSION_1_2_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_1_2_DEPRECATED}

{$define CL_EXT_SUFFIX__VERSION_2_0_DEPRECATED}
{$define CL_EXT_PREFIX__VERSION_2_0_DEPRECATED}
{$endif}
{$endif}

{$IFDEF WIN32}
  
  (* scalar types  *)
  type
  tcl_char = int8;
  tcl_uchar = uint8;
  tcl_short = int16;
  tcl_ushort = uint16;
  tcl_int = int32;
  tcl_uint = cardinal;
  tcl_long = int64;
  tcl_ulong = uint64;

  tcl_half = int16;
  tcl_float = Extended;
  tcl_double = double;
  
  (* Macro names and corresponding values defined by OpenCL *)
  const
  CL_CHAR_BIT = 8; 
  CL_SCHAR_MAX = 127; 
  CL_SCHAR_MIN = (-127-1); 
  CL_CHAR_MAX = CL_SCHAR_MAX; 
  CL_CHAR_MIN = CL_SCHAR_MIN; 
  CL_UCHAR_MAX = 255; 
  CL_SHRT_MAX = 32767; 
  CL_SHRT_MIN = (-32767-1); 
  CL_USHRT_MAX = 65535; 
  CL_INT_MAX = 2147483647; 
  CL_INT_MIN = (-2147483647-1);
  CL_UINT_MAX = $ffffffff;
  CL_LONG_MAX = int64.MinValue;
  CL_LONG_MIN = int64.MinValue;
  CL_ULONG_MAX = uint64.MaxValue;

  CL_FLT_DIG = 6;
  CL_FLT_MANT_DIG = 24;
  CL_FLT_MAX_10_EXP = +38; 
  CL_FLT_MAX_EXP = +128; 
  CL_FLT_MIN_10_EXP = -37; 
  CL_FLT_MIN_EXP = -125; 
  CL_FLT_RADIX = 2; 
  CL_FLT_MAX = 340282346638528859811704183484516925440.0;
  CL_FLT_MIN = 1.175494350822287507969e-38;
  CL_FLT_EPSILON = 1.1920928955078125e-7;
  
  CL_HALF_DIG = 3; 
  CL_HALF_MANT_DIG = 11; 
  CL_HALF_MAX_10_EXP = +4; 
  CL_HALF_MAX_EXP = +16; 
  CL_HALF_MIN_10_EXP = -4; 
  CL_HALF_MIN_EXP = -13; 
  CL_HALF_RADIX = 2; 
  CL_HALF_MAX = 65504.0;
  CL_HALF_MIN = 6.103515625e-5;
  CL_HALF_EPSILON = 9.765625e-4;
  
  CL_DBL_DIG = 15; 
  CL_DBL_MANT_DIG = 53; 
  CL_DBL_MAX_10_EXP = +308; 
  CL_DBL_MAX_EXP = +1024; 
  CL_DBL_MIN_10_EXP = -307; 
  CL_DBL_MIN_EXP = -1021; 
  CL_DBL_RADIX = 2; 
  CL_DBL_MAX = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0; 
  CL_DBL_MIN = 2.225073858507201383090e-308; 
  CL_DBL_EPSILON = 2.220446049250313080847e-16; 
  
  CL_M_E = 2.718281828459045090796; 
  CL_M_LOG2E = 1.442695040888963387005; 
  CL_M_LOG10E = 0.434294481903251816668; 
  CL_M_LN2 = 0.693147180559945286227; 
  CL_M_LN10 = 2.302585092994045901094; 
  CL_M_PI = 3.141592653589793115998; 
  CL_M_PI_2 = 1.570796326794896557999; 
  CL_M_PI_4 = 0.785398163397448278999; 
  CL_M_1_PI = 0.318309886183790691216; 
  CL_M_2_PI = 0.636619772367581382433; 
  CL_M_2_SQRTPI = 1.128379167095512558561; 
  CL_M_SQRT2 = 1.414213562373095145475; 
  CL_M_SQRT1_2 = 0.707106781186547572737; 
  
  CL_M_E_F = 2.71828174591064;
  CL_M_LOG2E_F = 1.44269502162933;
  CL_M_LOG10E_F = 0.43429449200630;
  CL_M_LN2_F = 0.69314718246460;
  CL_M_LN10_F = 2.30258512496948;
  CL_M_PI_F = 3.14159274101257;
  CL_M_PI_2_F = 1.57079637050629;
  CL_M_PI_4_F = 0.78539818525314;
  CL_M_1_PI_F = 0.31830987334251;
  CL_M_2_PI_F = 0.63661974668503;
  CL_M_2_SQRTPI_F = 1.12837922573090;
  CL_M_SQRT2_F = 1.41421353816986;
  CL_M_SQRT1_2_F = 0.70710676908493;

  CL_HUGE_VALF = 1e50;
  CL_HUGE_VAL = 1e500;
  CL_MAXFLOAT = CL_FLT_MAX; 
  CL_INFINITY = CL_HUGE_VALF;
  CL_NAN = CL_INFINITY-CL_INFINITY;
  
  {$ELSE}
  
  (* scalar types  *)
  type
  tcl_char = int8_t;
  tcl_uchar = uint8_t;
  __attribute__ = function: int16_t{cl_short}{<= !!!4 unknown type};
  __attribute__ = function: uint16_t{cl_ushort}{<= !!!4 unknown type};
  __attribute__ = function: int32_t{cl_int}{<= !!!4 unknown type};
  __attribute__ = function: uint32_t{cl_uint}{<= !!!4 unknown type};
  __attribute__ = function: int64_t{cl_long}{<= !!!4 unknown type};
  __attribute__ = function: uint64_t{cl_ulong}{<= !!!4 unknown type};
  
  __attribute__ = function: uint16_t{cl_half}{<= !!!4 unknown type};
  __attribute__ = function: float{cl_float}{<= !!!4 unknown type};
  __attribute__ = function: double{cl_double}{<= !!!4 unknown type};
  
  (* Macro names and corresponding values defined by OpenCL *)
  const
  CL_CHAR_BIT = 8; 
  CL_SCHAR_MAX = 127; 
  CL_SCHAR_MIN = (-127-1); 
  CL_CHAR_MAX = CL_SCHAR_MAX; 
  CL_CHAR_MIN = CL_SCHAR_MIN; 
  CL_UCHAR_MAX = 255; 
  CL_SHRT_MAX = 32767; 
  CL_SHRT_MIN = (-32767-1); 
  CL_USHRT_MAX = 65535; 
  CL_INT_MAX = 2147483647; 
  CL_INT_MIN = (-2147483647-1); 
  CL_UINT_MAX = UINT($ffffffff); 
  CL_LONG_MAX = ({!!!a type cast? =>} {cl_long(}$7FFFFFFFFFFFFFFF); 
  CL_LONG_MIN = ((cl_long)-$7FFFFFFFFFFFFFFF-1); 
  CL_ULONG_MAX = ({!!!a type cast? =>} {cl_ulong(}UINT($FFFFFFFFFFFFFFFF)); 
  
  CL_FLT_DIG = 6; 
  CL_FLT_MANT_DIG = 24; 
  CL_FLT_MAX_10_EXP = +38; 
  CL_FLT_MAX_EXP = +128; 
  CL_FLT_MIN_10_EXP = -37; 
  CL_FLT_MIN_EXP = -125; 
  CL_FLT_RADIX = 2; 
  CL_FLT_MAX = 340282346638528859811704183484516925440.0f; 
  CL_FLT_MIN = 1.175494350822287507969e-38f; 
  CL_FLT_EPSILON = 1.1920928955078125e-7f; 
  
  CL_HALF_DIG = 3; 
  CL_HALF_MANT_DIG = 11; 
  CL_HALF_MAX_10_EXP = +4; 
  CL_HALF_MAX_EXP = +16; 
  CL_HALF_MIN_10_EXP = -4; 
  CL_HALF_MIN_EXP = -13; 
  CL_HALF_RADIX = 2; 
  CL_HALF_MAX = 65504.0f; 
  CL_HALF_MIN = 6.103515625e-$5f; 
  CL_HALF_EPSILON = 9.765625e-$4f; 
  
  CL_DBL_DIG = 15; 
  CL_DBL_MANT_DIG = 53; 
  CL_DBL_MAX_10_EXP = +308; 
  CL_DBL_MAX_EXP = +1024; 
  CL_DBL_MIN_10_EXP = -307; 
  CL_DBL_MIN_EXP = -1021; 
  CL_DBL_RADIX = 2; 
  CL_DBL_MAX = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0; 
  CL_DBL_MIN = 2.225073858507201383090e-308; 
  CL_DBL_EPSILON = 2.220446049250313080847e-16; 
  
  CL_M_E = 2.718281828459045090796; 
  CL_M_LOG2E = 1.442695040888963387005; 
  CL_M_LOG10E = 0.434294481903251816668; 
  CL_M_LN2 = 0.693147180559945286227; 
  CL_M_LN10 = 2.302585092994045901094; 
  CL_M_PI = 3.141592653589793115998; 
  CL_M_PI_2 = 1.570796326794896557999; 
  CL_M_PI_4 = 0.785398163397448278999; 
  CL_M_1_PI = 0.318309886183790691216; 
  CL_M_2_PI = 0.636619772367581382433; 
  CL_M_2_SQRTPI = 1.128379167095512558561; 
  CL_M_SQRT2 = 1.414213562373095145475; 
  CL_M_SQRT1_2 = 0.707106781186547572737; 
  
  CL_M_E_F = 2.71828174591064f; 
  CL_M_LOG2E_F = 1.44269502162933f; 
  CL_M_LOG10E_F = 0.43429449200630f; 
  CL_M_LN2_F = 0.69314718246460f;
  CL_M_LN10_F = 2.30258512496948f; 
  CL_M_PI_F = 3.14159274101257f; 
  CL_M_PI_2_F = 1.57079637050629f; 
  CL_M_PI_4_F = 0.78539818525314f; 
  CL_M_1_PI_F = 0.31830987334251f; 
  CL_M_2_PI_F = 0.63661974668503f; 
  CL_M_2_SQRTPI_F = 1.12837922573090f; 
  CL_M_SQRT2_F = 1.41421353816986f; 
  CL_M_SQRT1_2_F = 0.70710676908493f;

  CL_HUGE_VALF = ({!!!a type cast? =>} {cl_float(}1e50); 
  CL_HUGE_VAL = ({!!!a type cast? =>} {cl_double(}1e500); 
  
  function nanf{!!!3 unknown typedef}: float; 
  CL_NAN = nanf();
  CL_MAXFLOAT = CL_FLT_MAX; 
  CL_INFINITY = CL_HUGE_VALF; 
  
  {$endif}
  
  (* Mirror types to GL types. Mirror types allow us to avoid deciding which 87s to load based on whether we are using GL or GLES here. *)
  type
  cl_GLuint = cardinal;
  cl_GLint = integer;
  cl_GLenum = cardinal;
  
  (*
   * Vector types 
   *
   *  Note:   OpenCL requires that all types be naturally aligned. 
   *          This means that vector types must be naturally aligned.
   *          For example, a vector of four floats must be aligned to
   *          a 16 byte boundary (calculated as 4 * the natural 4-byte 
   *          alignment of the float).  The alignment qualifiers here
   *          will only function properly if your compiler supports them
   *          and if you don't actively work to defeat them.  For example,
   *          in order for a cl_float4 to be 16 byte aligned in a struct,
   *          the start of the struct must itself be 16-byte aligned. 
   *
   *          Maintaining proper alignment is the user's responsibility.
   *)
  
  (* Define basic vector types *)
  {$if defined( __VEC__ )}
  {$include <altivec.h>    * may be omitted depending on compiler. AltiVec spec provides no way to detect whether the header is required. * }
  __cl_uchar16 = vector{char}{<= !!!4 unknown type}; 
  __cl_char16 = vector{char}{<= !!!4 unknown type}; 
  __cl_ushort8 = vector; 
  __cl_short8 = vector; 
  __cl_uint4 = vector; 
  __cl_int4 = vector; 
  __cl_float4 = vector{float}{<= !!!4 unknown type}; 
  const
  __CL_UCHAR16__ = 1; 
  __CL_CHAR16__ = 1; 
  __CL_USHORT8__ = 1; 
  __CL_SHORT8__ = 1; 
  __CL_UINT4__ = 1; 
  __CL_INT4__ = 1; 
  __CL_FLOAT4__ = 1; 
  {$endif}
  
  {$if defined( __SSE__ )}
  {$if defined( __MINGW64__ )}
  {$include <intrin.h>}
  {$else}
  {$include <xmmintrin.h>}
  {$endif}
  {$if defined( __GNUC__ )}
  type
  __attribute__ = function{!!!3 unknown typedef}: float{__cl_float4}{<= !!!4 unknown type}; 
  {$else}
  __cl_float4 = __m128; 
  {$endif}
  const
  __CL_FLOAT4__ = 1; 
  {$endif}
  
  {$if defined( __SSE2__ )}
  {$if defined( __MINGW64__ )}
  {$include <intrin.h>}
  {$else}
  {$include <emmintrin.h>}
  {$endif}
  {$if defined( __GNUC__ )}
  type
  __attribute__ = function{!!!3 unknown typedef}: cl_uchar{__cl_uchar16}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_char{__cl_char16}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_ushort{__cl_ushort8}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_short{__cl_short8}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_uint{__cl_uint4}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_int{__cl_int4}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_ulong{__cl_ulong2}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_long{__cl_long2}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_double{__cl_double2}{<= !!!4 unknown type}; 
  {$else}
  __cl_uchar16 = __m128i; 
  __cl_char16 = __m128i; 
  __cl_ushort8 = __m128i; 
  __cl_short8 = __m128i; 
  __cl_uint4 = __m128i; 
  __cl_int4 = __m128i; 
  __cl_ulong2 = __m128i; 
  __cl_long2 = __m128i; 
  __cl_double2 = __m128d; 
  {$endif}
  const
  __CL_UCHAR16__ = 1; 
  __CL_CHAR16__ = 1; 
  __CL_USHORT8__ = 1; 
  __CL_SHORT8__ = 1; 
  __CL_INT4__ = 1; 
  __CL_UINT4__ = 1; 
  __CL_ULONG2__ = 1; 
  __CL_LONG2__ = 1; 
  __CL_DOUBLE2__ = 1; 
  {$endif}
  
  {$if defined( __MMX__ )}
  {$include <mmintrin.h>}
  {$if defined( __GNUC__ )}
  type
  __attribute__ = function{!!!3 unknown typedef}: cl_uchar{__cl_uchar8}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_char{__cl_char8}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_ushort{__cl_ushort4}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_short{__cl_short4}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_uint{__cl_uint2}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_int{__cl_int2}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_ulong{__cl_ulong1}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_long{__cl_long1}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_float{__cl_float2}{<= !!!4 unknown type}; 
  {$else}
  __cl_uchar8 = __m64; 
  __cl_char8 = __m64; 
  __cl_ushort4 = __m64; 
  __cl_short4 = __m64; 
  __cl_uint2 = __m64; 
  __cl_int2 = __m64; 
  __cl_ulong1 = __m64; 
  __cl_long1 = __m64; 
  __cl_float2 = __m64; 
  {$endif}
  const
  __CL_UCHAR8__ = 1; 
  __CL_CHAR8__ = 1; 
  __CL_USHORT4__ = 1; 
  __CL_SHORT4__ = 1; 
  __CL_INT2__ = 1; 
  __CL_UINT2__ = 1; 
  __CL_ULONG1__ = 1; 
  __CL_LONG1__ = 1; 
  __CL_FLOAT2__ = 1; 
  {$endif}
  
  {$if defined( __AVX__ )}
  {$if defined( __MINGW64__ )}
  {$include <intrin.h>}
  {$else}
  {$include <immintrin.h> }
  {$endif}
  {$if defined( __GNUC__ )}
  type
  __attribute__ = function{!!!3 unknown typedef}: cl_float{__cl_float8}{<= !!!4 unknown type}; 
  __attribute__ = function{!!!3 unknown typedef}: cl_double{__cl_double4}{<= !!!4 unknown type}; 
  {$else}
  __cl_float8 = __m256; 
  __cl_double4 = __m256d; 
  {$endif}
  const
  __CL_FLOAT8__ = 1; 
  __CL_DOUBLE4__ = 1; 
  {$endif}

  
  (* Define alignment keys *)
  
  //function CL_ALIGNED(_x: integer): integer;
  
  (* Indicate whether .xyzw, .s0123 and .hi.lo are supported *)
  {$if __CL_HAS_ANON_STRUCT__}
  (* .xyzw and .s0123...{f|F} are supported *)
  CL_HAS_NAMED_VECTOR_FIELDS = 1; 
  (* .hi and .lo are supported *)
  CL_HAS_HI_LO_VECTOR_FIELDS = 1; 
  {$endif}
  
  (* Define cl_vector types *)
  
  (* ---- cl_charn ---- *)
  {!!!3 unknown typedef}
  
  {!!!3 unknown typedef}
  
  (* cl_char3 is identical in size, alignment and behavior to cl_char4. See section 6.1.5. *)
  //type
  //cl_char3 = cl_char4;
  //cl_uchar3 = cl_uchar4;
  //cl_short3 = cl_short4;
  //cl_ushort3 = cl_ushort4;
  //cl_half3 = cl_half4;
  //cl_int3 = cl_int4;
  //cl_uint3 = cl_uint4;
  //cl_long3 = cl_long4;
  //cl_ulong3 = cl_ulong4;
  //cl_float3 = cl_float4;
  //cl_double3 = cl_double4;

{$endif}
(* __CL_PLATFORM_H  *)

implementation


(*{CL_ALIGNED(_x)          __attribute__ ((aligned(_x)))}
function CL_ALIGNED(_x: integer): integer; 
begin
  result:= __attribute__((aligned(_x)))
end;

{CL_ALIGNED(_x)}
function CL_ALIGNED(_x: integer): integer; 
begin
end;

{CL_ALIGNED(_x)}
function CL_ALIGNED(_x: integer): integer; 
begin
end;

{__CL_STRINGIFY( _x )               # _x}
function __CL_STRINGIFY(_x: integer): integer; 
begin
end;

{_CL_STRINGIFY( _x )                __CL_STRINGIFY( _x )}
function _CL_STRINGIFY(_x: integer): integer; 
begin
  result:= __CL_STRINGIFY(_x)
end;                  *)

end.
